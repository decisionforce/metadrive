.. _rl_environments:

##########################
Existing RL Environments
##########################


Generalization Environment
###############################


To benchmark the generalizability of a driving policy, we develop an RL environment that can generate an unlimited number of diverse driving scenarios through procedural generation.
The following script creates a basic environment that can be used for such purpose:


.. code-block:: python

    from metadrive import MetaDriveEnv

    env = MetaDriveEnv(dict(
        environment_num=ENVIRONMENT_NUM,
        start_seed=START_SEED,
        random_lane_width=True,
        random_agent_model=True,
        random_lane_num=True
    ))

User can specify the training set with 1000 driving scenarios by setting :code:`ENVIRONMENT_NUM=1000` and :code:`START_SEED=1000`, while creating the test set by setting :code:`ENVIRONMENT_NUM=200` and :code:`START_SEED=0`.
In this case, the scenarios generated by random seeds [1000, 1999] will be used to train the agents and those by [0, 199] will be used to test the trained agent.



------------


.. image:: figs/metadrive-envs.jpg
   :width: 1000
   :align: center
   :class: with-border


Safety Environment
#####################




Safety is a major concern for the trial-and-error nature of RL.
As driving itself is a safety-critical application, it is essential to evaluate the constrained optimization methods under the domain of autonomous driving.
We therefore define a new suite of environments to benchmark the **safe exploration** in RL.


As shown in the left panel of the figure above, we randomly display static and movable obstacles in the traffic.
Different from the generalization task, we do not terminate the agent if a collision with those obstacles and traffic vehicles happens.
Instead, we allow agent to continue driving but flag the crash with a cost $+1$. Thus as safe exploration task, the learning agent is required to balance the reward and the cost to solve the constrained optimization problem.


.. code-block:: python

    from metadrive import SafeMetaDriveEnv

    env=SafeMetaDriveEnv(dict(
        environment_num=ENVIRONMENT_NUM,
        start_seed=START_SEED,
    ))

